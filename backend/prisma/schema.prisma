generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserType { 
  //Tier-3
  STUDENT                             //1MS-20-CS-001                //999 students per Semester

  //Tier-2
  ASSISTANT_PROFR                     //1MS-AS-CS-001                //999 per Department
  ASSOCIATE_PROFR                     //1MS-AP-ME-001                //999 per Department
  PROFR                               //1MS-PP-CE-001                //999 per Department
  HOD                                 //1MS-HD-CS-001                //999 per Department
  REGISTRAR                           //1MS-RR-CS-001                //999 per Department
  CLERKS                              //1MS-CK-ME-001                //999 per Department
  COORDINATOR                         //1MS-CR-CE-001                //999 per Department

  //Tier-1 Has no Department
  PRINCIPAL                           //1MS-PR-XX-001                //999 users
  DEAN                                //1MS-DE-XX-001                //999 users
  DIRECTOR                            //1MS-DR-XX-001                //999 users
  LIBRARIAN                           //1MS-LB-XX-001                //999 users
  LAB_ASSISTANT                       //1MS-LA-XX-001                //999 users
  SECURITY_STAFF                      //1MS-SC-XX-001                //999 users
  JANITORIAL_STAFF                    //1MS-JT-XX-001                //999 users
  TRANSPORT_STAFF                     //1MS-TS-XX-001                //999 users
  CAFETERIA_STAFF                     //1MS-CF-XX-001                //999 users
  LAB_TECHNICIANS                     //1MS-LT-XX-001                //999 users
  IT_STAFF                            //1MS-IT-XX-001                //999 users

  //Tier-0
  GUEST                               //1MS-X-G-00001                //10,48,575 guests
  ALUMINI                             //1MS-X-A-00001                //10,48,575 alumini
  ADMIN                               //1MS-X-X-00001                //10,48,575 admins
}

enum DptType { 
  AE              //Aerospace Engineering
  AD              //Artificial Intelligence and Data Science
  AI              //Artificial Intelligence and Machine Learning
  BT              //Biotechnology
  CH              //Chemical Engineering
  CV              //Civil Engineering
  CS              //Computer Science and Engineering
  CI              //Computer Science and Engineering (AI-ML)
  CY              //Computer Science and Engineering (Cyber Security)
  EE              //Electrical and Electronics Engineering
  EC              //Electronics & Communication Engineering
  EI              //Electronics & Instrumentation Engineering
  ET              //Electronics & Telecommunication Engineering
  IM              //Industrial Engineering & Management
  IS              //Information Science & Engineering	
  ME              //Mechanical Engineering	
  MD              //Medical Electronics Engineering	
  AT              //Architecture
}

enum SectionType { 
  A 
  B 
  C 
  D
}

enum ServerType {
  SEMINAR
  EVENT
  GENERAL
  ANNOUNCEMENT
  CLASSROOM
  DISCUSSION
  CLUB
  DEPARTMENTAL
  STUDENT_BODY
  SUPPORT
  RESEARCH
  WORKSHOP
  EXAM
  ALUMNI
  FACULTY
  ADMINISTRATION
}

enum StatusType {
  pending
  approved
  blocked
}

model User {
  id              Int           @id @default(autoincrement())
  type            UserType
  usn             String        @unique
  name            String
  department      DptType?
  admissionYear   String?
  year            Int?
  semester        Int?
  section         SectionType?
  phoneNumber     String         @unique
  password        String          
  createdAt       DateTime       @default(now())

  status          StatusType     @default(pending)

  reportsFiled    Report[]      @relation("Reporter")
  reportsReceived Report[]      @relation("Reported")

  ownedServer     Server[]        @relation("Owner")      
}

model Server {
  id              Int           @id @default(autoincrement())
  name            String      
  type            ServerType  
  about           String
  createdAt       DateTime      @default(now())
  allowAnonymous  Boolean       @default(false)

  user            User           @relation("Owner",fields: [ownerId],references: [id])
  ownerId         Int

  parent          Server?       @relation("ServerHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  parentId        Int?
  childServers    Server[]      @relation("ServerHierarchy")
  
  audience        Audience      @relation(fields: [audienceId], references: [id])
  audienceId      Int
}

model Audience {
  id              Int            @id @default(autoincrement())

  userType        UserType  

  year            Int[]
  semester        Int[]
  department      DptType[]

  usn             String[]
  createdAt       DateTime       @default(now())
  servers         Server[]
}

model Report {
  id              Int           @id @default(autoincrement())
  reason          String
  severity        Int
  fine            Float         @default(0.0)
  createdAt       DateTime      @default(now())

  reporter        User          @relation("Reporter", fields: [reporterId], references: [id])
  reporterId      Int
  reported        User          @relation("Reported", fields: [reportedId], references: [id])
  reportedId      Int
}